name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git unzip openjdk-17-jdk
        sudo apt-get install -y python3-dev libffi-dev libssl-dev
        sudo apt-get install -y zlib1g-dev libjpeg-dev libfreetype6-dev
        sudo apt-get install -y autoconf automake libtool pkg-config
        sudo apt-get install -y gcc-multilib g++-multilib
        sudo apt-get install -y m4 texinfo gettext
    
    - name: Set up Java environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-17-openjdk-amd64/bin" >> $GITHUB_PATH
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install specific Cython version that works with PyJNIus
        pip install "cython<3.0" "setuptools<60"
        pip install buildozer
    
    - name: Fix libffi compilation issues
      run: |
        # Install additional autotools and fix libffi issues
        sudo apt-get install -y libtool-bin autotools-dev
        # Set environment variables to help with autotools
        echo "ACLOCAL_PATH=/usr/share/aclocal" >> $GITHUB_ENV
        # Pre-install system libffi to avoid compilation issues
        sudo apt-get install -y libffi8 libffi-dev
    
    - name: Setup Android SDK manually
      run: |
        # Create SDK directory structure
        mkdir -p $HOME/.buildozer/android/platform/android-sdk
        cd $HOME/.buildozer/android/platform/android-sdk
        
        # Download and setup command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
        unzip -q commandlinetools-linux-8512546_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        # Create the old tools directory structure that buildozer expects
        mkdir -p tools/bin
        ln -sf ../../cmdline-tools/latest/bin/sdkmanager tools/bin/sdkmanager
        ln -sf ../../cmdline-tools/latest/bin/avdmanager tools/bin/avdmanager
        
        # Set environment variables
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        
        # Accept licenses
        mkdir -p licenses
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > licenses/android-sdk-preview-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > licenses/intel-android-extra-license
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
    
    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
    
    - name: Patch PyJNIus for Python 3.x compatibility
      run: |
        # Create a patch script to fix the 'long' type issue in PyJNIus
        cat > fix_pyjnius.py << 'EOF'
        import os
        import glob
        
        def patch_pyjnius_files():
            # Find PyJNIus files in buildozer cache
            search_paths = [
                "/home/runner/.buildozer/android/platform/build-*/packages/pyjnius",
                "/home/runner/.buildozer/android/platform/python-for-android/pythonforandroid/recipes/pyjnius",
                "/home/runner/work/kivypos/kivypos/.buildozer/android/platform/build-*/packages/pyjnius"
            ]
            
            for search_path in search_paths:
                for pyjnius_dir in glob.glob(search_path):
                    if os.path.exists(pyjnius_dir):
                        print(f"Found PyJNIus directory: {pyjnius_dir}")
                        
                        # Patch jnius_utils.pxi
                        utils_file = os.path.join(pyjnius_dir, "jnius", "jnius_utils.pxi")
                        if os.path.exists(utils_file):
                            print(f"Patching {utils_file}")
                            with open(utils_file, 'r') as f:
                                content = f.read()
                            
                            # Replace 'long' with 'int' for Python 3.x compatibility
                            content = content.replace('isinstance(arg, long)', 'isinstance(arg, int)')
                            
                            with open(utils_file, 'w') as f:
                                f.write(content)
                            print(f"Patched {utils_file}")
        
        if __name__ == "__main__":
            patch_pyjnius_files()
        EOF
        
        # We'll run this patch during the build process
        echo "PyJNIus patch script created"
    
    - name: Build APK
      run: |
        # Start the build process
        buildozer android debug || {
          echo "Build failed, attempting to patch PyJNIus and retry..."
          python fix_pyjnius.py
          buildozer android debug
        }
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: store-pos-android-apk
        path: bin/*.apk
        retention-days: 30
    
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: .buildozer/android/platform/build-*/logs/
        retention-days: 7
