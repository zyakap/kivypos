name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git unzip openjdk-17-jdk
        sudo apt-get install -y python3-dev libffi-dev libssl-dev
        sudo apt-get install -y zlib1g-dev libjpeg-dev libfreetype6-dev
        sudo apt-get install -y autoconf automake libtool pkg-config
        sudo apt-get install -y gcc-multilib g++-multilib
        sudo apt-get install -y m4 texinfo gettext
    
    - name: Set up Java environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-17-openjdk-amd64/bin" >> $GITHUB_PATH
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython
    
    - name: Fix libffi compilation issues
      run: |
        # Install additional autotools and fix libffi issues
        sudo apt-get install -y libtool-bin autotools-dev
        # Set environment variables to help with autotools
        echo "ACLOCAL_PATH=/usr/share/aclocal" >> $GITHUB_ENV
        # Pre-install system libffi to avoid compilation issues
        sudo apt-get install -y libffi8 libffi-dev
    
    - name: Setup Android SDK manually
      run: |
        # Create SDK directory structure
        mkdir -p $HOME/.buildozer/android/platform/android-sdk
        cd $HOME/.buildozer/android/platform/android-sdk
        
        # Download and setup command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
        unzip -q commandlinetools-linux-8512546_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        # Create the old tools directory structure that buildozer expects
        mkdir -p tools/bin
        ln -sf ../../cmdline-tools/latest/bin/sdkmanager tools/bin/sdkmanager
        ln -sf ../../cmdline-tools/latest/bin/avdmanager tools/bin/avdmanager
        
        # Set environment variables
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        
        # Accept licenses
        mkdir -p licenses
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > licenses/android-sdk-preview-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > licenses/intel-android-extra-license
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
    
    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
    
    - name: Build APK
      run: |
        buildozer android debug
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: store-pos-android-apk
        path: bin/*.apk
        retention-days: 30
    
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: .buildozer/android/platform/build-*/logs/
        retention-days: 7
